# serializer version: 1
# name: test_load_multiple_files
  Schema(kind=<Kind.SCHEMA: 'gql_schema'>, definition=SchemaDefinition(mutation='Mutation', query='Query', subscription=None, types={'Mutation', 'Query'}), members={'PokemonNumber': ScalarTypeNode(name='PokemonNumber', path='schemaName.PokemonNumber', description='The Pokemon number, in the range of "0001" to "9999".'), 'Type': EnumTypeNode(name='Type', path='schemaName.Type', description='Generation I Pokemon types.', values=[EnumValue(name='BUG', description='Bug type.'), EnumValue(name='DRAGON', description='Dragon type.'), EnumValue(name='ELECTRIC', description='Electric type.'), EnumValue(name='FIGHTING', description='Fighting type.'), EnumValue(name='FIRE', description='Fire type.'), EnumValue(name='FLYING', description='Flying type.'), EnumValue(name='GHOST', description='Ghost type.'), EnumValue(name='GRASS', description='Grass type.'), EnumValue(name='GROUND', description='Ground type.'), EnumValue(name='ICE', description='Ice type.'), EnumValue(name='NORMAL', description='Normal type.'), EnumValue(name='POISON', description='Poison type.'), EnumValue(name='PSYCHIC', description='Psychic type.'), EnumValue(name='ROCK', description='Rock type.'), EnumValue(name='WATER', description='Water type.')]), 'Error': InterfaceTypeNode(name='Error', path='schemaName.Error', description='Generic error interface.', fields=[Field(name='message', description='Error message.', type=Annotation(name='String', non_null=True, is_list=False, non_null_list=False))]), 'Annotation': InterfaceTypeNode(name='Annotation', path='schemaName.Annotation', description='Interface containing all annotation combinations.', fields=[Field(name='null', description='Nullable element.', type=Annotation(name='String', non_null=False, is_list=False, non_null_list=False)), Field(name='non_null', description='Non-nullable element.', type=Annotation(name='String', non_null=True, is_list=False, non_null_list=False)), Field(name='null_list_null', description='Nullable list with nullable elements.', type=Annotation(name='String', non_null=False, is_list=True, non_null_list=False)), Field(name='null_list_non_null', description='Nullable list with non-nullable elements.', type=Annotation(name='String', non_null=True, is_list=True, non_null_list=False)), Field(name='non_null_list_null', description='Non-nullable list with nullable elements.', type=Annotation(name='String', non_null=False, is_list=True, non_null_list=True)), Field(name='non_null_list_non_null', description='Non-nullable list with non-nullable elements.', type=Annotation(name='String', non_null=True, is_list=True, non_null_list=True))]), 'AnnotationImpl': ObjectTypeNode(name='AnnotationImpl', path='schemaName.AnnotationImpl', description='', fields=[Field(name='null', description='Nullable element.', type=Annotation(name='String', non_null=False, is_list=False, non_null_list=False)), Field(name='non_null', description='Non-nullable element.', type=Annotation(name='String', non_null=True, is_list=False, non_null_list=False)), Field(name='null_list_null', description='Nullable list with nullable elements.', type=Annotation(name='String', non_null=False, is_list=True, non_null_list=False)), Field(name='null_list_non_null', description='Nullable list with non-nullable elements.', type=Annotation(name='String', non_null=True, is_list=True, non_null_list=False)), Field(name='non_null_list_null', description='Non-nullable list with nullable elements.', type=Annotation(name='String', non_null=False, is_list=True, non_null_list=True)), Field(name='non_null_list_non_null', description='Non-nullable list with non-nullable elements.', type=Annotation(name='String', non_null=True, is_list=True, non_null_list=True)), Field(name='custom', description='Custom element.', type=Annotation(name='Int', non_null=True, is_list=False, non_null_list=False))]), 'InvalidPokemonNumberError': ObjectTypeNode(name='InvalidPokemonNumberError', path='schemaName.InvalidPokemonNumberError', description='', fields=[Field(name='message', description='', type=Annotation(name='String', non_null=True, is_list=False, non_null_list=False)), Field(name='no', description='', type=Annotation(name='PokemonNumber', non_null=True, is_list=False, non_null_list=False))]), 'PokemonExistsError': ObjectTypeNode(name='PokemonExistsError', path='schemaName.PokemonExistsError', description='', fields=[Field(name='message', description='', type=Annotation(name='String', non_null=True, is_list=False, non_null_list=False)), Field(name='no', description='', type=Annotation(name='PokemonNumber', non_null=True, is_list=False, non_null_list=False))]), 'PokemonNotFoundError': ObjectTypeNode(name='PokemonNotFoundError', path='schemaName.PokemonNotFoundError', description='', fields=[Field(name='message', description='', type=Annotation(name='String', non_null=True, is_list=False, non_null_list=False)), Field(name='no', description='', type=Annotation(name='PokemonNumber', non_null=True, is_list=False, non_null_list=False))]), 'CreatePokemonInput': InputObjectTypeNode(name='CreatePokemonInput', path='schemaName.CreatePokemonInput', description='', fields=[Input(name='no', description='', type=Annotation(name='PokemonNumber', non_null=True, is_list=False, non_null_list=False)), Input(name='name', description='', type=Annotation(name='String', non_null=True, is_list=False, non_null_list=False)), Input(name='types', description='', type=Annotation(name='Type', non_null=True, is_list=True, non_null_list=True)), Input(name='prevEvolutionNumbers', description='', type=Annotation(name='PokemonNumber', non_null=True, is_list=True, non_null_list=False)), Input(name='nextEvolutionNumbers', description='', type=Annotation(name='PokemonNumber', non_null=True, is_list=True, non_null_list=False))]), 'EvolutionNode': ObjectTypeNode(name='EvolutionNode', path='schemaName.EvolutionNode', description='', fields=[Field(name='no', description='', type=Annotation(name='PokemonNumber', non_null=True, is_list=False, non_null_list=False)), Field(name='name', description='', type=Annotation(name='String', non_null=True, is_list=False, non_null_list=False))]), 'TypeNode': ObjectTypeNode(name='TypeNode', path='schemaName.TypeNode', description='', fields=[Field(name='id', description='', type=Annotation(name='ID', non_null=True, is_list=False, non_null_list=False)), Field(name='type', description='', type=Annotation(name='Type', non_null=True, is_list=False, non_null_list=False))]), 'PokemonNode': ObjectTypeNode(name='PokemonNode', path='schemaName.PokemonNode', description='', fields=[Field(name='no', description='', type=Annotation(name='PokemonNumber', non_null=True, is_list=False, non_null_list=False)), Field(name='name', description='', type=Annotation(name='String', non_null=True, is_list=False, non_null_list=False)), Field(name='types', description='', type=Annotation(name='TypeNode', non_null=True, is_list=True, non_null_list=True)), Field(name='prevEvolutions', description='', type=Annotation(name='EvolutionNode', non_null=True, is_list=True, non_null_list=True)), Field(name='nextEvolutions', description='', type=Annotation(name='EvolutionNode', non_null=True, is_list=True, non_null_list=True))]), 'CreatePokemonError': UnionTypeNode(name='CreatePokemonError', path='schemaName.CreatePokemonError', description='', types=['InvalidPokemonNumberError', 'PokemonExistsError']), 'CreatePokemonResponse': ObjectTypeNode(name='CreatePokemonResponse', path='schemaName.CreatePokemonResponse', description='', fields=[Field(name='data', description='', type=Annotation(name='PokemonNode', non_null=False, is_list=False, non_null_list=False)), Field(name='error', description='', type=Annotation(name='CreatePokemonError', non_null=False, is_list=False, non_null_list=False))]), 'Mutation.createPokemon': OperationTypeNode(name='createPokemon', path='schemaName.Mutation.createPokemon', description='Creates a Pokemon. If ``overwrite`` is true, overwrite the existing\nPokemon if a duplicate with the same ``input.no`` exists.', arguments=[Input(name='input', description='Parameters which determines to Pokemon to be created.', type=Annotation(name='CreatePokemonInput', non_null=True, is_list=False, non_null_list=False)), Input(name='overwrite', description='If we should the existing Pokemon if a duplicate with the same\n``no`` exists.', type=Annotation(name='Boolean', non_null=False, is_list=False, non_null_list=False))], type=Annotation(name='CreatePokemonResponse', non_null=True, is_list=False, non_null_list=False)), 'PokemonError': UnionTypeNode(name='PokemonError', path='schemaName.PokemonError', description='', types=['InvalidPokemonNumberError', 'PokemonNotFoundError']), 'PokemonResponse': ObjectTypeNode(name='PokemonResponse', path='schemaName.PokemonResponse', description='Response object for Query.pokemon.', fields=[Field(name='data', description='The Pokemon specified by the query.', type=Annotation(name='PokemonNode', non_null=False, is_list=False, non_null_list=False)), Field(name='error', description='Errors encountered during the query.', type=Annotation(name='PokemonError', non_null=False, is_list=False, non_null_list=False))]), 'Query.pokemon': OperationTypeNode(name='pokemon', path='schemaName.Query.pokemon', description='Queries for a Pokemon specified by ``no``.', arguments=[Input(name='no', description="The Pokemon number, in the range of '0001' and '9999'.", type=Annotation(name='PokemonNumber', non_null=True, is_list=False, non_null_list=False))], type=Annotation(name='PokemonResponse', non_null=True, is_list=False, non_null_list=False))})
# ---
